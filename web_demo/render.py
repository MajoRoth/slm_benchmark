#!/usr/bin/env python3
"""Generate forms for human evaluation."""
import json
from pathlib import Path

from jinja2 import FileSystemLoader, Environment


def main():
    """Main function."""
    loader = FileSystemLoader(searchpath="./templates")
    env = Environment(loader=loader)
    template = env.get_template("demo.html.jinja2")

    male_sentiments = list(Path("../audio/emotion_prompts/male").glob("*.wav"))
    female_sentiments = list(Path("../audio/emotion_prompts/female").glob("*.wav"))
    classes = ["laugh", "phone", "waterfall"]

    sections = [
        {
            "title": "Sentiment Alignment (Male)",
            "description": "Emotional speech generated by a voice cloning model. Prompts are taken from the RAVDESS dataset",
            "table": {
                "headers": ["Emotion", "Audio Prompt", "This is the best day ever", "This is the worst day ever"],
                "content": [
                    [
                        s.stem,
                        s,
                        Path("../generated_audio/sentiment_alignment/male/text_0") / s.name,
                        Path("../generated_audio/sentiment_alignment/male/text_1") / s.name
                    ] for s in male_sentiments
                ]
            }
        },

        {
            "title": "Sentiment Alignment (Female)",
            "description": "Emotional speech generated by a voice cloning model. Prompts are taken from the RAVDESS dataset",
            "table": {
                "headers": ["Emotion", "Audio Prompt", "This is the best day ever", "This is the worst day ever"],
                "content": [
                    [
                        s.stem,
                        s,
                        Path("../generated_audio/sentiment_alignment/female/text_0") / s.name,
                        Path("../generated_audio/sentiment_alignment/female/text_1") / s.name
                    ] for s in female_sentiments
                ]
            }
        },

        {
            "title": "Background Noise Alignment ",
            "description": "Background noise to content alignment",
            "table": {
                "headers": ["class", "laugh background noise", "phone background noise",
                            "waterfall background noise"],
                "content": [
                    [
                        c,
                        Path(f"../generated_audio/background_noise_alignment/text_{c}") / f"laugh.wav",
                        Path(f"../generated_audio/background_noise_alignment/text_{c}") / f"phone.wav",
                        Path(f"../generated_audio/background_noise_alignment/text_{c}") / f"waterfall.wav"
                    ] for c in classes
                ]
            }
        }
    ]

    html = template.render(
        page_title="Hebrew TTS",
        sections=sections

    )

    with open("index.html", 'w') as f:
        f.write(html)


if __name__ == "__main__":
    main()
